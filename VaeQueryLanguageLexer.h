/** \file
 *  This C header file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : VaeQueryLanguage.g
 *     -                            On : 2016-03-04 14:33:12
 *     -                 for the lexer : VaeQueryLanguageLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer VaeQueryLanguageLexer has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pVaeQueryLanguageLexer, which is returned from a call to VaeQueryLanguageLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 * * The methods in pVaeQueryLanguageLexer are  as follows:
 *
 *  -  void      pVaeQueryLanguageLexer->SPECIAL_NEXT(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->SPECIAL_PREV(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->DIV(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->MULT(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->SLASH(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->STAR(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->SQL(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->AT(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->XPATH_AXIS_SEP(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->EQUALITY(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->EQUALITY_ALT(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->INEQUALITY(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->INEQUALITY_ALT(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->LESS(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->LTE(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->GREATER(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->GTE(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->AND(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->OR(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->XOR(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->NOT(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->ADD_TOK(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->SUB(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->MOD(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->PIPE(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->IFTRUE(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->COLON(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->PATHREF(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->LBRACKET(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->RBRACKET(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->LPAREN(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->RPAREN(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->COMMA(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->STRING(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->PERMALINK(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->FLOAT(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->INT(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->VARIABLE(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->XPATH_FUNCTION(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->FUNCTION(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->AND_ALT(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->OR_ALT(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->XOR_ALT(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->XPATH_AXES(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->NAME(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->DOT_STEP(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->WS(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->ESC_SEQ(pVaeQueryLanguageLexer)
 *  -  void      pVaeQueryLanguageLexer->Tokens(pVaeQueryLanguageLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_VaeQueryLanguageLexer_H
#define _VaeQueryLanguageLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct VaeQueryLanguageLexer_Ctx_struct VaeQueryLanguageLexer, * pVaeQueryLanguageLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for VaeQueryLanguageLexer
 */
struct VaeQueryLanguageLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;


     void (*mSPECIAL_NEXT)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mSPECIAL_PREV)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mDIV)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mMULT)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mSLASH)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mSTAR)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mSQL)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mAT)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mXPATH_AXIS_SEP)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mEQUALITY)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mEQUALITY_ALT)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mINEQUALITY)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mINEQUALITY_ALT)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mLESS)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mLTE)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mGREATER)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mGTE)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mAND)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mOR)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mXOR)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mNOT)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mADD_TOK)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mSUB)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mMOD)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mPIPE)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mIFTRUE)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mCOLON)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mPATHREF)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mLBRACKET)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mRBRACKET)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mLPAREN)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mRPAREN)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mCOMMA)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mSTRING)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mPERMALINK)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mFLOAT)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mINT)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mVARIABLE)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mXPATH_FUNCTION)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mFUNCTION)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mAND_ALT)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mOR_ALT)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mXOR_ALT)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mXPATH_AXES)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mNAME)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mDOT_STEP)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mWS)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mESC_SEQ)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);
     void (*mTokens)	(struct VaeQueryLanguageLexer_Ctx_struct * ctx);    const char * (*getGrammarFileName)();
    void	    (*free)   (struct VaeQueryLanguageLexer_Ctx_struct * ctx);
        
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pVaeQueryLanguageLexer VaeQueryLanguageLexerNew         (pANTLR3_INPUT_STREAM instream);
ANTLR3_API pVaeQueryLanguageLexer VaeQueryLanguageLexerNewSSD      (pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the lexer will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define AND_ALT      55
#define FUNCTION      48
#define EQUALITY      24
#define XPATH_FUNCTION      54
#define STAR      20
#define NODE_XPATHFUNCTION      14
#define MOD      38
#define NODE_FUNCTION      5
#define GTE      31
#define SUB      37
#define FLOAT      59
#define NOT      35
#define AND      32
#define EOF      -1
#define LTE      29
#define LPAREN      45
#define INEQUALITY_ALT      27
#define DOT_STEP      52
#define EQUALITY_ALT      25
#define LBRACKET      43
#define AT      22
#define NODE_ABSOLUTE      4
#define RPAREN      46
#define SQL      21
#define NAME      51
#define ESC_SEQ      61
#define SLASH      19
#define GREATER      30
#define COMMA      47
#define NODE_STAR      12
#define PATHREF      42
#define NODE_VALUE      13
#define XPATH_AXIS_SEP      23
#define LESS      28
#define SPECIAL_NEXT      15
#define OR_ALT      56
#define PIPE      39
#define XOR_ALT      57
#define XPATH_AXES      53
#define RBRACKET      44
#define XOR      34
#define NODE_PATH      8
#define ADD_TOK      36
#define NODE_PREDICATE      10
#define IFTRUE      40
#define NODE_PARENEXPR      7
#define INEQUALITY      26
#define PERMALINK      49
#define SPECIAL_PREV      16
#define INT      50
#define MULT      18
#define NODE_PATHREF      9
#define NODE_IF      6
#define COLON      41
#define WS      62
#define VARIABLE      60
#define OR      33
#define DIV      17
#define NODE_SQL      11
#define STRING      58
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for VaeQueryLanguageLexer
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
