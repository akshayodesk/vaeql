/** \file
 *  This C header file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : VaeQueryLanguage.g
 *     -                            On : 2016-03-04 14:33:11
 *     -                for the parser : VaeQueryLanguageParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser VaeQueryLanguageParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pVaeQueryLanguageParser, which is returned from a call to VaeQueryLanguageParserNew().
 *
 * The methods in pVaeQueryLanguageParser are  as follows:
 *
 *  - VaeQueryLanguageParser_start_return      pVaeQueryLanguageParser->start(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_expr_return      pVaeQueryLanguageParser->expr(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_orExpr_return      pVaeQueryLanguageParser->orExpr(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_xorExpr_return      pVaeQueryLanguageParser->xorExpr(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_andExpr_return      pVaeQueryLanguageParser->andExpr(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_comparisonExpr_return      pVaeQueryLanguageParser->comparisonExpr(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_addSubExpr_return      pVaeQueryLanguageParser->addSubExpr(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_multExpr_return      pVaeQueryLanguageParser->multExpr(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_ifExpr_return      pVaeQueryLanguageParser->ifExpr(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_notExpr_return      pVaeQueryLanguageParser->notExpr(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_valueExpr_return      pVaeQueryLanguageParser->valueExpr(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_function_return      pVaeQueryLanguageParser->function(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_expressionList_return      pVaeQueryLanguageParser->expressionList(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_functionNoArgs_return      pVaeQueryLanguageParser->functionNoArgs(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_path_return      pVaeQueryLanguageParser->path(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_rootPath_return      pVaeQueryLanguageParser->rootPath(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_permalink_return      pVaeQueryLanguageParser->permalink(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_absolutePath_return      pVaeQueryLanguageParser->absolutePath(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_idPath_return      pVaeQueryLanguageParser->idPath(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_relativePath_return      pVaeQueryLanguageParser->relativePath(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_relativePathWithoutPredicates_return      pVaeQueryLanguageParser->relativePathWithoutPredicates(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_unionPath_return      pVaeQueryLanguageParser->unionPath(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_pathStep_return      pVaeQueryLanguageParser->pathStep(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_pathStepInternal_return      pVaeQueryLanguageParser->pathStepInternal(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_axisSpecifier_return      pVaeQueryLanguageParser->axisSpecifier(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_predicate_return      pVaeQueryLanguageParser->predicate(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_predicateExpr_return      pVaeQueryLanguageParser->predicateExpr(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_predicateAndExpr_return      pVaeQueryLanguageParser->predicateAndExpr(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_predicateComparisonExpr_return      pVaeQueryLanguageParser->predicateComparisonExpr(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_predicatePathExpr_return      pVaeQueryLanguageParser->predicatePathExpr(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_filterExpr_return      pVaeQueryLanguageParser->filterExpr(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_primaryExpr_return      pVaeQueryLanguageParser->primaryExpr(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_xpathFunction_return      pVaeQueryLanguageParser->xpathFunction(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_andOper_return      pVaeQueryLanguageParser->andOper(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_orOper_return      pVaeQueryLanguageParser->orOper(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_xorOper_return      pVaeQueryLanguageParser->xorOper(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_value_return      pVaeQueryLanguageParser->value(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_variable_return      pVaeQueryLanguageParser->variable(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_comparisonOper_return      pVaeQueryLanguageParser->comparisonOper(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_addSubOper_return      pVaeQueryLanguageParser->addSubOper(pVaeQueryLanguageParser)
 *  - VaeQueryLanguageParser_multOper_return      pVaeQueryLanguageParser->multOper(pVaeQueryLanguageParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_VaeQueryLanguageParser_H
#define _VaeQueryLanguageParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct VaeQueryLanguageParser_Ctx_struct VaeQueryLanguageParser, * pVaeQueryLanguageParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
typedef struct VaeQueryLanguageParser_start_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_start_return;

typedef struct VaeQueryLanguageParser_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_expr_return;

typedef struct VaeQueryLanguageParser_orExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_orExpr_return;

typedef struct VaeQueryLanguageParser_xorExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_xorExpr_return;

typedef struct VaeQueryLanguageParser_andExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_andExpr_return;

typedef struct VaeQueryLanguageParser_comparisonExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_comparisonExpr_return;

typedef struct VaeQueryLanguageParser_addSubExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_addSubExpr_return;

typedef struct VaeQueryLanguageParser_multExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_multExpr_return;

typedef struct VaeQueryLanguageParser_ifExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_ifExpr_return;

typedef struct VaeQueryLanguageParser_notExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_notExpr_return;

typedef struct VaeQueryLanguageParser_valueExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_valueExpr_return;

typedef struct VaeQueryLanguageParser_function_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_function_return;

typedef struct VaeQueryLanguageParser_expressionList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_expressionList_return;

typedef struct VaeQueryLanguageParser_functionNoArgs_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_functionNoArgs_return;

typedef struct VaeQueryLanguageParser_path_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_path_return;

typedef struct VaeQueryLanguageParser_rootPath_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_rootPath_return;

typedef struct VaeQueryLanguageParser_permalink_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_permalink_return;

typedef struct VaeQueryLanguageParser_absolutePath_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_absolutePath_return;

typedef struct VaeQueryLanguageParser_idPath_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_idPath_return;

typedef struct VaeQueryLanguageParser_relativePath_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_relativePath_return;

typedef struct VaeQueryLanguageParser_relativePathWithoutPredicates_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_relativePathWithoutPredicates_return;

typedef struct VaeQueryLanguageParser_unionPath_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_unionPath_return;

typedef struct VaeQueryLanguageParser_pathStep_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_pathStep_return;

typedef struct VaeQueryLanguageParser_pathStepInternal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_pathStepInternal_return;

typedef struct VaeQueryLanguageParser_axisSpecifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_axisSpecifier_return;

typedef struct VaeQueryLanguageParser_predicate_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_predicate_return;

typedef struct VaeQueryLanguageParser_predicateExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_predicateExpr_return;

typedef struct VaeQueryLanguageParser_predicateAndExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_predicateAndExpr_return;

typedef struct VaeQueryLanguageParser_predicateComparisonExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_predicateComparisonExpr_return;

typedef struct VaeQueryLanguageParser_predicatePathExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_predicatePathExpr_return;

typedef struct VaeQueryLanguageParser_filterExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_filterExpr_return;

typedef struct VaeQueryLanguageParser_primaryExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_primaryExpr_return;

typedef struct VaeQueryLanguageParser_xpathFunction_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_xpathFunction_return;

typedef struct VaeQueryLanguageParser_andOper_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_andOper_return;

typedef struct VaeQueryLanguageParser_orOper_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_orOper_return;

typedef struct VaeQueryLanguageParser_xorOper_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_xorOper_return;

typedef struct VaeQueryLanguageParser_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_value_return;

typedef struct VaeQueryLanguageParser_variable_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_variable_return;

typedef struct VaeQueryLanguageParser_comparisonOper_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_comparisonOper_return;

typedef struct VaeQueryLanguageParser_addSubOper_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_addSubOper_return;

typedef struct VaeQueryLanguageParser_multOper_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    VaeQueryLanguageParser_multOper_return;



/** Context tracking structure for VaeQueryLanguageParser
 */
struct VaeQueryLanguageParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     VaeQueryLanguageParser_start_return (*start)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_expr_return (*expr)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_orExpr_return (*orExpr)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_xorExpr_return (*xorExpr)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_andExpr_return (*andExpr)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_comparisonExpr_return (*comparisonExpr)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_addSubExpr_return (*addSubExpr)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_multExpr_return (*multExpr)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_ifExpr_return (*ifExpr)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_notExpr_return (*notExpr)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_valueExpr_return (*valueExpr)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_function_return (*function)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_expressionList_return (*expressionList)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_functionNoArgs_return (*functionNoArgs)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_path_return (*path)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_rootPath_return (*rootPath)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_permalink_return (*permalink)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_absolutePath_return (*absolutePath)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_idPath_return (*idPath)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_relativePath_return (*relativePath)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_relativePathWithoutPredicates_return (*relativePathWithoutPredicates)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_unionPath_return (*unionPath)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_pathStep_return (*pathStep)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_pathStepInternal_return (*pathStepInternal)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_axisSpecifier_return (*axisSpecifier)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_predicate_return (*predicate)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_predicateExpr_return (*predicateExpr)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_predicateAndExpr_return (*predicateAndExpr)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_predicateComparisonExpr_return (*predicateComparisonExpr)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_predicatePathExpr_return (*predicatePathExpr)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_filterExpr_return (*filterExpr)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_primaryExpr_return (*primaryExpr)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_xpathFunction_return (*xpathFunction)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_andOper_return (*andOper)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_orOper_return (*orOper)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_xorOper_return (*xorOper)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_value_return (*value)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_variable_return (*variable)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_comparisonOper_return (*comparisonOper)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_addSubOper_return (*addSubOper)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
     VaeQueryLanguageParser_multOper_return (*multOper)	(struct VaeQueryLanguageParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct VaeQueryLanguageParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pVaeQueryLanguageParser VaeQueryLanguageParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pVaeQueryLanguageParser VaeQueryLanguageParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define AND_ALT      55
#define FUNCTION      48
#define EQUALITY      24
#define XPATH_FUNCTION      54
#define STAR      20
#define NODE_XPATHFUNCTION      14
#define MOD      38
#define NODE_FUNCTION      5
#define GTE      31
#define SUB      37
#define FLOAT      59
#define NOT      35
#define AND      32
#define EOF      -1
#define LTE      29
#define LPAREN      45
#define INEQUALITY_ALT      27
#define DOT_STEP      52
#define EQUALITY_ALT      25
#define LBRACKET      43
#define AT      22
#define NODE_ABSOLUTE      4
#define RPAREN      46
#define SQL      21
#define NAME      51
#define ESC_SEQ      61
#define SLASH      19
#define GREATER      30
#define COMMA      47
#define NODE_STAR      12
#define PATHREF      42
#define NODE_VALUE      13
#define XPATH_AXIS_SEP      23
#define LESS      28
#define SPECIAL_NEXT      15
#define OR_ALT      56
#define PIPE      39
#define XOR_ALT      57
#define XPATH_AXES      53
#define RBRACKET      44
#define XOR      34
#define NODE_PATH      8
#define NODE_PREDICATE      10
#define ADD_TOK      36
#define IFTRUE      40
#define NODE_PARENEXPR      7
#define PERMALINK      49
#define INEQUALITY      26
#define SPECIAL_PREV      16
#define INT      50
#define MULT      18
#define NODE_PATHREF      9
#define NODE_IF      6
#define COLON      41
#define WS      62
#define VARIABLE      60
#define OR      33
#define DIV      17
#define NODE_SQL      11
#define STRING      58
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for VaeQueryLanguageParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
